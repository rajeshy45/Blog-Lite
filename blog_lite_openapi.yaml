openapi: 3.0.3
info:
  title: Blog Lite API Documentation
  description: |-
    Blog Lite is a simple blogging website.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8080/
tags:
  - name: user
    description: Operations about user
  - name: post
    description: Operations about post
paths:
  /api/post:
    post:
      tags:
        - post
      summary: Add a new post
      description: Add a new post
      operationId: addPost
      requestBody:
        description: Create a new post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    delete:
      tags:
        - post
      summary: Deletes all posts
      description: delete all posts
      operationId: deletePosts
      responses:
        '200':
          description: Successful operation
      security:
        - api_key: []
  /api/post/{postId}:
    get:
      tags:
        - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'          
        '404':
          description: Post not found
    put:
      tags:
        - post
      summary: Updates a post
      description: ''
      operationId: updatePost
      requestBody:
        description: Update a post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      parameters:
        - name: postId
          in: path
          description: ID of post that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: Post not found
      security:
        - api_key: []
    delete:
      tags:
        - post
      summary: Deletes a post
      description: delete a post
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          description: post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: Post not found
      security:
        - api_key: []
  /api/user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    delete:
      tags:
        - user
      summary: Deletes all users
      description: delete all users
      operationId: deleteUsers
      responses:
        '200':
          description: Successful operation
      security:
        - api_key: []
  /api/user/{username}:
    get:
      tags:
        - user
      summary: Get user by username
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The user that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      requestBody:
        description: 'Update an existing user'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: username
          in: path
          description: 'name that need to be updated'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
      security:
        - api_key: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '404':
          description: User not found
      security:
        - api_key: []
components:
  schemas:
    User:
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 10
        uname:
          type: string
          example: theUser
        fname:
          type: string
          example: John
        lname:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
    Post:
      type: object
      properties:
        pid:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: My First Blog
        description:
          type: string
          example: Description of my first blog.
        timestamp:
          type: string
          example: 1985‑09‑25 17:45:30.005
        uid:
          type: integer
          example: 15
    Error:
      type: object
      properties:
        error_code:
          type: string
          example: BE101
        error_message:
          type: string
          example: Duplicate user found!
  requestBodies:
    Post:
      description: Post object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header